<template>
	<button :class="[
		`${clsPrefix}`,
		{
			[`${clsPrefix}-block`]:block,
			[`${clsPrefix}-color-${finalColor}`]:finalColor,
			[`${clsPrefix}-variant-${finalVariant}`]:finalVariant,
		}]" :disabled="disabled" @tap="handleClick">
		<slot></slot>
	</button>
</template>

<script lang="uts" setup>
	const clsPrefix = "triones-antm-button";

	const { block = false, color, danger = false, disabled, ghost, type = "default", variant } = defineProps({
		block: {
			type: Boolean,
			default: false
		},
		color: {
			type: String,
			validator(value) {
				return ['default', 'primary', 'danger'].includes(value)
			}
		},
		danger: {
			type: Boolean,
			default: false
		},
		disabled: {
			type: Boolean,
			default: false
		},
		ghost: {
			type: Boolean,
			default: false
		},
		type: {
			type: String,
			default: 'default',
			validator(value) {
				return ['primary', 'dashed', 'link', 'text', 'default'].includes(value)
			}
		},
		variant: {
			type: String,
			validator(value) {
				return ['outlined', 'dashed', 'solid', 'text', 'link'].includes(value)
			}
		}
	})



	const finalColor = computed(() => {
		let finalColor : any = color
		if (type) {
			if (!color) {
				if (type === 'primary' || type === 'link') {
					finalColor = 'primary'
				} else if (type === 'default') {
					finalColor = 'default'
				}
			}
		}
		if (danger) {
			finalColor = 'danger'
		}
		return finalColor
	});
	const finalVariant = computed(() => {
		let finalVariant = variant
		if (type) {
			if (!variant) {
				if (type === 'primary') {
					finalVariant = 'solid'
				} else if (type === 'default') {
					finalVariant = 'outlined'
				} else if (type === 'dashed' || type === 'link' || type === 'text') {
					finalVariant = type
				}
			}

		}
		return finalVariant;
	});

	const emit = defineEmits(["click"])
	const handleClick = () => {
		emit("click")
	}
</script>

<style lang="scss">
	@import "../../style/variable.scss";
	$buttonCls: 'triones-antm-button';

	.#{$buttonCls} {
		background-color: transparent;

		&::after {
			content: none;

		}

		position: relative;
		display: inline-flex;
		flex-direction: column;
		justify-self: center;
		align-items: center;
		height: auto;
		line-height: normal;
		padding: 7px 12px;
		border-radius: $borderRaduis;
		border: 1px none;
		box-sizing: border-box;
		font-size: 14px;
		z-index: 2;

		&:active {
			filter: brightness(92%);
		}


		&-color {
			&-default {
				background-color: black;
				color: black;
				border: #000000 1px solid;
			}

			&-primary {
				background-color: $colorPrimary;
				color: $colorPrimary;
				border: $colorPrimary 1px solid;
			}

			&-danger {
				color: $colorDanger;
				background-color: $colorDanger;
				border: $colorDanger 1px solid;
			}
		}

		&-variant {
			&-solid {
				color: #ffffff;
			}

			&-outlined {
				background-color: #ffffff;
			}

			&-dashed {
				background-color: #ffffff;
				border-style: dashed;
			}


			&-text {
				background-color: #ffffff;
				border: 0;
			}

			&-link {
				background-color: #ffffff;
				border: 0;
			}
		}

		&-block {
			display: flex;
			width: 100%;
		}

	}
</style>